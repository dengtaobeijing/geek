// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: sbi.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SbiClient is the client API for Sbi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SbiClient interface {
	ListSbi(ctx context.Context, in *ListSbiReq, opts ...grpc.CallOption) (*ListSbiReply, error)
	GetSbiById(ctx context.Context, in *GetSbiByIdReq, opts ...grpc.CallOption) (*GetSbiByIdReply, error)
	CreateOrders(ctx context.Context, in *CreateOrdersReq, opts ...grpc.CallOption) (*CreateOrdersReply, error)
	GetOrdersByUserId(ctx context.Context, in *GetOrdersByUserIdReq, opts ...grpc.CallOption) (*GetOrdersByUserReply, error)
}

type sbiClient struct {
	cc grpc.ClientConnInterface
}

func NewSbiClient(cc grpc.ClientConnInterface) SbiClient {
	return &sbiClient{cc}
}

func (c *sbiClient) ListSbi(ctx context.Context, in *ListSbiReq, opts ...grpc.CallOption) (*ListSbiReply, error) {
	out := new(ListSbiReply)
	err := c.cc.Invoke(ctx, "/Sbi/ListSbi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sbiClient) GetSbiById(ctx context.Context, in *GetSbiByIdReq, opts ...grpc.CallOption) (*GetSbiByIdReply, error) {
	out := new(GetSbiByIdReply)
	err := c.cc.Invoke(ctx, "/Sbi/GetSbiById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sbiClient) CreateOrders(ctx context.Context, in *CreateOrdersReq, opts ...grpc.CallOption) (*CreateOrdersReply, error) {
	out := new(CreateOrdersReply)
	err := c.cc.Invoke(ctx, "/Sbi/CreateOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sbiClient) GetOrdersByUserId(ctx context.Context, in *GetOrdersByUserIdReq, opts ...grpc.CallOption) (*GetOrdersByUserReply, error) {
	out := new(GetOrdersByUserReply)
	err := c.cc.Invoke(ctx, "/Sbi/GetOrdersByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SbiServer is the server API for Sbi service.
// All implementations must embed UnimplementedSbiServer
// for forward compatibility
type SbiServer interface {
	ListSbi(context.Context, *ListSbiReq) (*ListSbiReply, error)
	GetSbiById(context.Context, *GetSbiByIdReq) (*GetSbiByIdReply, error)
	CreateOrders(context.Context, *CreateOrdersReq) (*CreateOrdersReply, error)
	GetOrdersByUserId(context.Context, *GetOrdersByUserIdReq) (*GetOrdersByUserReply, error)
	mustEmbedUnimplementedSbiServer()
}

// UnimplementedSbiServer must be embedded to have forward compatible implementations.
type UnimplementedSbiServer struct {
}

func (UnimplementedSbiServer) ListSbi(context.Context, *ListSbiReq) (*ListSbiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSbi not implemented")
}
func (UnimplementedSbiServer) GetSbiById(context.Context, *GetSbiByIdReq) (*GetSbiByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSbiById not implemented")
}
func (UnimplementedSbiServer) CreateOrders(context.Context, *CreateOrdersReq) (*CreateOrdersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrders not implemented")
}
func (UnimplementedSbiServer) GetOrdersByUserId(context.Context, *GetOrdersByUserIdReq) (*GetOrdersByUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByUserId not implemented")
}
func (UnimplementedSbiServer) mustEmbedUnimplementedSbiServer() {}

// UnsafeSbiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SbiServer will
// result in compilation errors.
type UnsafeSbiServer interface {
	mustEmbedUnimplementedSbiServer()
}

func RegisterSbiServer(s grpc.ServiceRegistrar, srv SbiServer) {
	s.RegisterService(&Sbi_ServiceDesc, srv)
}

func _Sbi_ListSbi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSbiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SbiServer).ListSbi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sbi/ListSbi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SbiServer).ListSbi(ctx, req.(*ListSbiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sbi_GetSbiById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSbiByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SbiServer).GetSbiById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sbi/GetSbiById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SbiServer).GetSbiById(ctx, req.(*GetSbiByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sbi_CreateOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SbiServer).CreateOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sbi/CreateOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SbiServer).CreateOrders(ctx, req.(*CreateOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sbi_GetOrdersByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SbiServer).GetOrdersByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sbi/GetOrdersByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SbiServer).GetOrdersByUserId(ctx, req.(*GetOrdersByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sbi_ServiceDesc is the grpc.ServiceDesc for Sbi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sbi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sbi",
	HandlerType: (*SbiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSbi",
			Handler:    _Sbi_ListSbi_Handler,
		},
		{
			MethodName: "GetSbiById",
			Handler:    _Sbi_GetSbiById_Handler,
		},
		{
			MethodName: "CreateOrders",
			Handler:    _Sbi_CreateOrders_Handler,
		},
		{
			MethodName: "GetOrdersByUserId",
			Handler:    _Sbi_GetOrdersByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sbi.proto",
}
