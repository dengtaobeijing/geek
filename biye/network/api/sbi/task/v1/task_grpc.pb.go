// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: task.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	IntegratingCount(ctx context.Context, in *IntegratingCountReq, opts ...grpc.CallOption) (*IntegratingCountReply, error)
	GetIntegrating(ctx context.Context, in *GetIntegratingReq, opts ...grpc.CallOption) (*GetIntegratingReply, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) IntegratingCount(ctx context.Context, in *IntegratingCountReq, opts ...grpc.CallOption) (*IntegratingCountReply, error) {
	out := new(IntegratingCountReply)
	err := c.cc.Invoke(ctx, "/Task/IntegratingCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetIntegrating(ctx context.Context, in *GetIntegratingReq, opts ...grpc.CallOption) (*GetIntegratingReply, error) {
	out := new(GetIntegratingReply)
	err := c.cc.Invoke(ctx, "/Task/GetIntegrating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	IntegratingCount(context.Context, *IntegratingCountReq) (*IntegratingCountReply, error)
	GetIntegrating(context.Context, *GetIntegratingReq) (*GetIntegratingReply, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) IntegratingCount(context.Context, *IntegratingCountReq) (*IntegratingCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegratingCount not implemented")
}
func (UnimplementedTaskServer) GetIntegrating(context.Context, *GetIntegratingReq) (*GetIntegratingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrating not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_IntegratingCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegratingCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).IntegratingCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Task/IntegratingCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).IntegratingCount(ctx, req.(*IntegratingCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetIntegrating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegratingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetIntegrating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Task/GetIntegrating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetIntegrating(ctx, req.(*GetIntegratingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntegratingCount",
			Handler:    _Task_IntegratingCount_Handler,
		},
		{
			MethodName: "GetIntegrating",
			Handler:    _Task_GetIntegrating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
